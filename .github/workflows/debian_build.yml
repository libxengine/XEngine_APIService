name: debian build workflows

on:
  push:
    branches:
      - 'develop'
    paths:
      - 'XEngine_Source/**'
      - 'XEngine_Release/**'
      - '.github/**'

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    container:
      image: debian:${{ matrix.name }}
      options: --platform ${{ matrix.platform }}
    strategy:
      matrix:
        include:
          - arch: amd64
            runner: ubuntu-24.04
            platform: linux/amd64
            artifact: x86-64
            name: bookworm
            version: 12
          - arch: amd64
            runner: ubuntu-24.04
            platform: linux/amd64
            artifact: x86-64
            name: trixie
            version: 13

    steps:
      - name: Checkout main repository code
        uses: actions/checkout@v4
        with:
          ref: 'develop'

      - name: Checkout dependency repository (xengine)
        uses: actions/checkout@v4
        with:
          repository: libxengine/libxengine
          path: libxengine

      - name: Set TERM variable
        run: echo "TERM=xterm" >> $GITHUB_ENV

      - name: sub module checkout (XEngine_OPenSource)
        uses: actions/checkout@v4
        with:
          repository: libxengine/XEngine_OPenSource
          path: XEngine_Source/XEngine_DependLibrary/XEngine_OPenSource
      - name: sub module checkout (XEngine_PhoneData)
        uses: actions/checkout@v4
        with:
          repository: libxengine/XEngine_PhoneData
          path: XEngine_Source/XEngine_DependLibrary/XEngine_PhoneData
      - name: sub module checkout (XEngine_IPMacData)
        uses: actions/checkout@v4
        with:
          repository: libxengine/XEngine_IPMacData
          path: XEngine_Source/XEngine_DependLibrary/XEngine_IPMacData

      - name: install system package
        run: |
            apt update -y
            apt install gcc g++ make git jq unzip curl wget -y
            apt install liblua5.4-dev libopencv-dev libopencv-contrib-dev libqrencode-dev libleptonica-dev libtesseract-dev -y

      - name: install xengine library
        run: |
            latest_tag=$(curl -s https://api.github.com/repos/libxengine/libxengine/releases/latest | jq -r .tag_name)
            wget https://github.com/libxengine/libxengine/releases/download/$latest_tag/XEngine_Debian_${{ matrix.version }}_${{ matrix.artifact }}.zip
            unzip ./XEngine_Debian_${{ matrix.version }}_${{ matrix.artifact }}.zip -d ./XEngine_Debian_${{ matrix.version }}_${{ matrix.artifact }}
            cd XEngine_Debian_${{ matrix.version }}_${{ matrix.artifact }}
            
            chmod 777 *
            ./XEngine_LINEnv.sh -i 3
      - name: make
        run: |
            cd XEngine_Source
            make
            make FLAGS=InstallAll
            make FLAGS=CleanAll

            make RELEASE=1
            make FLAGS=InstallAll
            make FLAGS=CleanAll
            cd ..
      - name: test
        run: |
            cd XEngine_Release
            chmod 777 copydb.sh
            ./copydb.sh
            ./XEngine_APIServiceApp -t

      - name: Upload folder as artifact
        uses: actions/upload-artifact@v4
        with:
          name: XEngine_APIServiceApp-Debian_${{ matrix.version }}_x86-64
          path: XEngine_Release/
          retention-days: 1